# -*- coding: utf-8 -*-
"""Ejercicio 8.3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11d4tKphHuJhUdwUcl0K5WprC5fjLwbSa
"""

#Ejercicio 8.3:

# === CLASES GEOMÉTRICAS =====================================================

class Figura:
    def volumen(self):
        pass

    def superficie(self):
        pass


class Cilindro(Figura):
    def __init__(self, radio, altura):
        self.radio = radio
        self.altura = altura

    def volumen(self):
        return math.pi * self.radio**2 * self.altura

    def superficie(self):
        return 2 * math.pi * self.radio * (self.radio + self.altura)


class Esfera(Figura):
    def __init__(self, radio):
        self.radio = radio

    def volumen(self):
        return (4/3) * math.pi * self.radio**3

    def superficie(self):
        return 4 * math.pi * self.radio**2


class Piramide(Figura):
    def __init__(self, base, altura, apotema):
        self.base = base
        self.altura = altura
        self.apotema = apotema

    def volumen(self):
        return (1/3) * self.base**2 * self.altura

    def superficie(self):
        return self.base**2 + 2 * self.base * self.apotema


# === FUNCIONES DE EVENTO ====================================================

def calcular_cilindro():
    try:
        r = float(entry_radio_c.get())
        h = float(entry_altura_c.get())
        fig = Cilindro(r, h)
        mostrar_resultados(fig, "Cilindro")
    except:
        messagebox.showerror("Error", "Verifica los valores del cilindro.")


def calcular_esfera():
    try:
        r = float(entry_radio_e.get())
        fig = Esfera(r)
        mostrar_resultados(fig, "Esfera")
    except:
        messagebox.showerror("Error", "Verifica los valores de la esfera.")


def calcular_piramide():
    try:
        b = float(entry_base_p.get())
        h = float(entry_altura_p.get())
        a = float(entry_apotema_p.get())
        fig = Piramide(b, h, a)
        mostrar_resultados(fig, "Pirámide")
    except:
        messagebox.showerror("Error", "Verifica los valores de la pirámide.")


def mostrar_resultados(figura, nombre):
    vol = figura.volumen()
    sup = figura.superficie()
    messagebox.showinfo(f"{nombre} – Resultados",
                        f"Volumen: {vol:.2f} cm³\nSuperficie: {sup:.2f} cm²")


# === INTERFAZ GRÁFICA ======================================================

ventana = tk.Tk()
ventana.title("Calculadora de Volumen y Superficie")
ventana.geometry("400x500")

# --- Cilindro ---
tk.Label(ventana, text="Cilindro", font=("Arial", 12, "bold")).pack(pady=5)
entry_radio_c = tk.Entry(ventana)
entry_radio_c.insert(0, "Radio (cm)")
entry_radio_c.pack()

entry_altura_c = tk.Entry(ventana)
entry_altura_c.insert(0, "Altura (cm)")
entry_altura_c.pack()

tk.Button(ventana, text="Calcular Cilindro", command=calcular_cilindro).pack(pady=5)

# --- Esfera ---
tk.Label(ventana, text="Esfera", font=("Arial", 12, "bold")).pack(pady=10)
entry_radio_e = tk.Entry(ventana)
entry_radio_e.insert(0, "Radio (cm)")
entry_radio_e.pack()

tk.Button(ventana, text="Calcular Esfera", command=calcular_esfera).pack(pady=5)

# --- Pirámide ---
tk.Label(ventana, text="Pirámide", font=("Arial", 12, "bold")).pack(pady=10)
entry_base_p = tk.Entry(ventana)
entry_base_p.insert(0, "Base (cm)")
entry_base_p.pack()

entry_altura_p = tk.Entry(ventana)
entry_altura_p.insert(0, "Altura (cm)")
entry_altura_p.pack()

entry_apotema_p = tk.Entry(ventana)
entry_apotema_p.insert(0, "Apotema (cm)")
entry_apotema_p.pack()

tk.Button(ventana, text="Calcular Pirámide", command=calcular_piramide).pack(pady=5)

ventana.mainloop()